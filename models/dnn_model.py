# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xDMHppfAy2hIFWBMIs_PbcXWla7hFH10
"""

import os
os.environ['TF_CPP_MIN_LOG_LEVEL']='2'


import tensorflow as tf

learning_rate = 0.001
n_epochs = 20
batch_size = 100
display_step = 1

# 5 input, 1 output
def makeFirstData(x, y):
  return x, y[0]

# 6 input, 1 output
def makeSecondData(x, y):
  return x + y[0], y[1]

# 7 input, 1 output
def makeThirdData(x, y):
  return x + y[0:2], y[2]

# 8 input, 1 output
def makeFourthData(x, y):
  return x + y[0:3], y[3]

# 9 input, 1 output
def makeFifthData(x, y):
  return x + y[:4], y[4]

def makeBatchData(X_batch, Y_batch):
  X_batches = []
  Y_batches = []
  
  first_X_batch = [makeFirstData(x,y)[0] for x, y in zip(X_batch, Y_batch)]
  first_Y_batch = [makeFirstData(x,y)[1] for x, y in zip(X_batch, Y_batch)]
  X_batches.append(first_X_batch)
  Y_batches.append(first_Y_batch)    
  
  second_X_batch = [makeSecondData(x,y)[0] for x, y in zip(X_batch, Y_batch)]
  second_Y_batch = [makeSecondData(x,y)[1] for x, y in zip(X_batch, Y_batch)]
  X_batches.append(second_X_batch)
  Y_batches.append(second_Y_batch) 
  
  third_X_batch = [makeThirdData(x,y)[0] for x, y in zip(X_batch, Y_batch)]
  third_Y_batch = [makeFourthData(x,y)[1] for x, y in zip(X_batch, Y_batch)]
  X_batches.append(third_X_batch)
  Y_batches.append(third_Y_batch)    

  
  fourth_X_batch = [makeFourthData(x,y)[0] for x, y in zip(X_batch, Y_batch)]
  fourth_Y_batch = [makeFourthData(x,y)[1] for x, y in zip(X_batch, Y_batch)]
  X_batches.append(fourth_X_batch)
  Y_batches.append(fourth_Y_batch)    
  
  
  fifth_X_batch = [makeFifthData(x,y)[0] for x, y in zip(X_batch, Y_batch)]
  fifth_Y_batch = [makeFifthData(x,y)[1] for x, y in zip(X_batch, Y_batch)]
  X_batches.append(fifth_X_batch)
  Y_batches.append(fifth_Y_batch) 
  
  
  return X_batches, Y_batches

# Network Parameters
n_hidden_1 = 256 # 1st layer number of features
n_hidden_2 = 256 # 2nd layer number of features
n_input = [5,6,7,8,9] # lose data + win data input (img shape: 28*28)
n_classes = 1 # 1 win champs total classes (0-9 digits)



# tf Graph input
def makePlaceholder(batch_size, n_input, n_classes):
  X = tf.placeholder(tf.float32, [batch_size, n_input])
  Y = tf.placeholder(tf.float32, [batch_size, n_classes])
  return X, Y

# Create model
def multilayer_perceptron(x, weights, biases):
    # Hidden layer
    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])
    layer_1 = tf.nn.relu(layer_1)
    # Hidden layer
    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])
    layer_2 = tf.nn.relu(layer_2)
    # Output layer with linear activation
    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']
    return out_layer

# Store layers weight & bias
weights = {
    'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),
    'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),
    'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes]))
}

biases = {
    'b1': tf.Variable(tf.random_normal([n_hidden_1])),
    'b2': tf.Variable(tf.random_normal([n_hidden_2])),
    'out': tf.Variable(tf.random_normal([n_classes]))
}

# Construct model
def makeModel(weights, biases):
  models = []
  Ys = []
  for i in n_input:
    X, Y = makePlaceholder(batch_size, i, n_classes)
    pred = multilayer_perceptron(X, weights, biases)
    models.append(pred)
    Ys.append(Y)
  return models, Ys

def makeLosses(models, Ys):
  losses = []
  # Define loss and optimizer
  for pred,Y in zip(models, Ys):
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=Y))
    losses.append(loss)
  return losses

def makeOptimizer(losses):
  optimizers = []
  for loss in losses:
    optimizer = tf.train.RMSPropOptimizer(learning_rate=learning_rate).minimize(loss)
    optimizers.append(optimizer)
  return optimizers

# Launch the graph
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    
    # make 5 models, losses, optimizers
    models, Ys = makeModel(weights, biases)
    losses = makeLosses(models,Ys)
    optimizers = makeOptimizer(losses)
    
    # Training 
    for i in range(n_epochs):
        total_loss = 0.
        # TODO: total lol train data / batch_size
        n_batches = int(mnist.train.num_examples/batch_size)
        # Loop over all batches
        for j in range(n_batches):
            # TODO: mnist train data -> lol train data
            X_batch, Y_batch = mnist.train.next_batch(batch_size)
            # Run optimization op (backprop) and cost op (to get loss value)
            # run 5 optimizers
            # TODO: run 5 model train
            _, l = sess.run([optimizer, loss], feed_dict={X: X_batch, Y: Y_batch})
            # Compute average loss
            total_loss += l
        # Display logs per epoch step
        print('Average loss epoch {0}: {1}'.format(i, total_loss/n_batches))

    print("Optimization Finished!")


    correct_preds = tf.equal(tf.argmax(pred, axis=1), tf.argmax(Y, axis=1))
    accuracy = tf.reduce_sum(tf.cast(correct_preds, tf.float32))
    
    n_batches = int(mnist.test.num_examples/batch_size)
    total_correct_preds = 0
    
    for i in range(n_batches):
        X_batch, Y_batch = mnist.test.next_batch(batch_size)
        accuracy_batch = sess.run(accuracy, feed_dict={X: X_batch, Y:Y_batch}) 
        total_correct_preds += accuracy_batch   
    
    print('Accuracy {0}'.format(total_correct_preds/mnist.test.num_examples))

